# https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack?modal=values

nodeExporter:
  enabled: true
  hostNetwork: true
  hostPID: true
  service:
    type: ClusterIP

grafana:
  enabled: true
  adminPassword: "${grafana_admin_pass}"
  ingress:
    enabled: true
    ingressClassName: "traefik"
    hosts:
      - grafana.${ingress_domain}
  useStatefulSet: true
  persistence:
    enabled: true
    accessModes: ["ReadWriteOnce"]
    size: 10Gi
    lookupVolumeName: false # this breaks tfstate!
  service:
    type: ClusterIP
  grafana.ini:
    server:
      root_url: https://grafana.${ingress_domain}
    users:
      auto_assign_org: true
      auto_assign_org_role: Viewer
    auth.proxy:
      enabled: false
      header_name: X-WEBAUTH-USER
      header_property: username
      auto_sign_up: true
      headers: Role:X-WEBAUTH-ROLE
      whitelist: 10.0.0.0/8
    auth.generic_oauth:
      enabled: true
      name: "Yig Grafana"
      auth_url: "https://authelia.${ingress_domain}/api/oidc/authorization"
      token_url: "https://authelia.${ingress_domain}/api/oidc/token"
      api_url: "https://authelia.${ingress_domain}/api/oidc/userinfo"
      client_id: $__file{/etc/secrets/auth_generic_oauth/client-id} 
      client_secret: $__file{/etc/secrets/auth_generic_oauth/client-secret}
      role_attribute_path: contains(groups[*], '${ingress_admin_group}') && 'Admin' || 'Viewer'
      scopes: openid profile email groups
      empty_scopes: false
      allow_sign_up: true
      auto_login: false
      use_pkce: true
      use_refresh_token: true
      tls_client_ca: /certs/ca.crt
    security:
      cookie_samesite: null
      cookie_secure: true
  extraSecretMounts:
    - name: oidc-grafana-client-mount
      secretName: oidc-grafana-client
      defaultMode: 0440
      mountPath: /etc/secrets/auth_generic_oauth
      readOnly: true
    - name: ca-crt-mount
      secretName: ca-crt
      defaultMode: 0440
      mountPath: /certs/
      readOnly: true

alertmanager:
  enabled: true
  config:
    route:
      group_by: []
  alertmanagerSpec:
    alertmanagerConfigNamespaceSelector: {}
    alertmanagerConfigSelector: {}
    alertmanagerConfigMatcherStrategy:
      type: None
    replicas: 1 # ${replicas} # TODO: this is not a way to get HA
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  ingress:
    enabled: true
    ingressClassName: "traefik"
    annotations: []
    hosts:
      - alertmanager.${ingress_domain}

prometheus:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: "traefik"
    annotations: []
    hosts:
      - prometheus.${ingress_domain}
  prometheusSpec:
    enableAdminAPI: true
    scrapeInterval: 30s
    evaluationInterval: 30s
    retention: "90d"
    replicas: 1 # TODO: this is not a way to get HA, probably need to use Thanos
    serviceMonitorSelector:
      #matchLabels:
      #  release: kube-prometheus-stack
      matchExpressions:
        - key: release
          operator: In
          values: 
            - kube-prometheus-stack
            - prometheus-blackbox-exporter
    storageSpec:
      volumeClaimTemplate:
        labels:
          skipQuickBackup: "true"
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: "true"
    additionalAlertRelabelConfigs:
      - action: replace
        source_labels: ["instance"]
        regex: '^192\.168\.253\.12[012]:.*$'
        target_label: node
        replacement: yig32
      - action: replace
        source_labels: ["instance"]
        regex: '^192\.168\.255\.23[012]:.*$'
        target_label: node
        replacement: yig16
      - action: replace
        source_labels: ["instance"]
        regex: '^192\.168\.253\.11[012]:.*$'
        target_label: node
        replacement: yig16
      - action: replace
        source_labels: ["instance"]
        regex: '^192\.168\.243\.10[01]:.*$'
        target_label: node
        replacement: dagon
      - action: replace
        source_labels: ["instance"]
        regex: '^192\.168\.253\.13[01]:.*$'
        target_label: node
        replacement: dagon
    # BEGIN generated by tools/relabel_alerts_groups.sh at 2025-08-24T03:39:10Z
      - target_label: alertgroup
        replacement: alertmanager.rules
        action: replace
        source_labels: ["alertname"]
        regex: '^(AlertmanagerFailedReload|AlertmanagerMembersInconsistent|AlertmanagerFailedToSendAlerts|AlertmanagerClusterFailedToSendAlerts|AlertmanagerClusterFailedToSendAlerts|AlertmanagerConfigInconsistent|AlertmanagerClusterDown|AlertmanagerClusterCrashlooping)$'
      - target_label: alertgroup
        replacement: config-reloaders
        action: replace
        source_labels: ["alertname"]
        regex: '^(ConfigReloaderSidecarErrors)$'
      - target_label: alertgroup
        replacement: etcd
        action: replace
        source_labels: ["alertname"]
        regex: '^(etcdMembersDown|etcdInsufficientMembers|etcdNoLeader|etcdHighNumberOfLeaderChanges|etcdHighNumberOfFailedGRPCRequests|etcdHighNumberOfFailedGRPCRequests|etcdGRPCRequestsSlow|etcdMemberCommunicationSlow|etcdHighNumberOfFailedProposals|etcdHighFsyncDurations|etcdHighFsyncDurations|etcdHighCommitDurations|etcdDatabaseQuotaLowSpace|etcdExcessiveDatabaseGrowth|etcdDatabaseHighFragmentationRatio)$'
      - target_label: alertgroup
        replacement: general.rules
        action: replace
        source_labels: ["alertname"]
        regex: '^(TargetDown|Watchdog|InfoInhibitor)$'
      - target_label: alertgroup
        replacement: kube-apiserver-slos
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeAPIErrorBudgetBurn|KubeAPIErrorBudgetBurn|KubeAPIErrorBudgetBurn|KubeAPIErrorBudgetBurn)$'
      - target_label: alertgroup
        replacement: kube-state-metrics
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeStateMetricsListErrors|KubeStateMetricsWatchErrors|KubeStateMetricsShardingMismatch|KubeStateMetricsShardsMissing)$'
      - target_label: alertgroup
        replacement: kubernetes-apps
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubePodCrashLooping|KubePodNotReady|KubeDeploymentGenerationMismatch|KubeDeploymentReplicasMismatch|KubeDeploymentRolloutStuck|KubeStatefulSetReplicasMismatch|KubeStatefulSetGenerationMismatch|KubeStatefulSetUpdateNotRolledOut|KubeDaemonSetRolloutStuck|KubeContainerWaiting|KubeDaemonSetNotScheduled|KubeDaemonSetMisScheduled|KubeJobNotCompleted|KubeJobFailed|KubeHpaReplicasMismatch|KubeHpaMaxedOut|KubePdbNotEnoughHealthyPods)$'
      - target_label: alertgroup
        replacement: kubernetes-resources
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeCPUOvercommit|KubeMemoryOvercommit|KubeCPUQuotaOvercommit|KubeMemoryQuotaOvercommit|KubeQuotaAlmostFull|KubeQuotaFullyUsed|KubeQuotaExceeded|CPUThrottlingHigh)$'
      - target_label: alertgroup
        replacement: kubernetes-storage
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubePersistentVolumeFillingUp|KubePersistentVolumeFillingUp|KubePersistentVolumeInodesFillingUp|KubePersistentVolumeInodesFillingUp|KubePersistentVolumeErrors)$'
      - target_label: alertgroup
        replacement: kubernetes-system
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeVersionMismatch|KubeClientErrors)$'
      - target_label: alertgroup
        replacement: kubernetes-system-apiserver
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeClientCertificateExpiration|KubeClientCertificateExpiration|KubeAggregatedAPIErrors|KubeAggregatedAPIDown|KubeAPIDown|KubeAPITerminatedRequests)$'
      - target_label: alertgroup
        replacement: kubernetes-system-controller-manager
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeControllerManagerDown)$'
      - target_label: alertgroup
        replacement: kubernetes-system-kube-proxy
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeProxyDown)$'
      - target_label: alertgroup
        replacement: kubernetes-system-kubelet
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeNodeNotReady|KubeNodePressure|KubeNodeUnreachable|KubeletTooManyPods|KubeNodeReadinessFlapping|KubeNodeEviction|KubeletPlegDurationHigh|KubeletPodStartUpLatencyHigh|KubeletClientCertificateExpiration|KubeletClientCertificateExpiration|KubeletServerCertificateExpiration|KubeletServerCertificateExpiration|KubeletClientCertificateRenewalErrors|KubeletServerCertificateRenewalErrors|KubeletDown)$'
      - target_label: alertgroup
        replacement: kubernetes-system-scheduler
        action: replace
        source_labels: ["alertname"]
        regex: '^(KubeSchedulerDown)$'
      - target_label: alertgroup
        replacement: node-exporter
        action: replace
        source_labels: ["alertname"]
        regex: '^(NodeFilesystemSpaceFillingUp|NodeFilesystemSpaceFillingUp|NodeFilesystemAlmostOutOfSpace|NodeFilesystemAlmostOutOfSpace|NodeFilesystemFilesFillingUp|NodeFilesystemFilesFillingUp|NodeFilesystemAlmostOutOfFiles|NodeFilesystemAlmostOutOfFiles|NodeNetworkReceiveErrs|NodeNetworkTransmitErrs|NodeHighNumberConntrackEntriesUsed|NodeTextFileCollectorScrapeError|NodeClockSkewDetected|NodeClockNotSynchronising|NodeRAIDDegraded|NodeRAIDDiskFailure|NodeFileDescriptorLimit|NodeFileDescriptorLimit|NodeCPUHighUsage|NodeSystemSaturation|NodeMemoryMajorPagesFaults|NodeMemoryHighUtilization|NodeDiskIOSaturation|NodeSystemdServiceFailed|NodeSystemdServiceCrashlooping|NodeBondingDegraded)$'
      - target_label: alertgroup
        replacement: node-network
        action: replace
        source_labels: ["alertname"]
        regex: '^(NodeNetworkInterfaceFlapping)$'
      - target_label: alertgroup
        replacement: prometheus
        action: replace
        source_labels: ["alertname"]
        regex: '^(PrometheusBadConfig|PrometheusSDRefreshFailure|PrometheusKubernetesListWatchFailures|PrometheusNotificationQueueRunningFull|PrometheusErrorSendingAlertsToSomeAlertmanagers|PrometheusNotConnectedToAlertmanagers|PrometheusTSDBReloadsFailing|PrometheusTSDBCompactionsFailing|PrometheusNotIngestingSamples|PrometheusDuplicateTimestamps|PrometheusOutOfOrderTimestamps|PrometheusRemoteStorageFailures|PrometheusRemoteWriteBehind|PrometheusRemoteWriteDesiredShards|PrometheusRuleFailures|PrometheusMissingRuleEvaluations|PrometheusTargetLimitHit|PrometheusLabelLimitHit|PrometheusScrapeBodySizeLimitHit|PrometheusScrapeSampleLimitHit|PrometheusTargetSyncFailure|PrometheusHighQueryLoad|PrometheusErrorSendingAlertsToAnyAlertmanager)$'
      - target_label: alertgroup
        replacement: prometheus-operator
        action: replace
        source_labels: ["alertname"]
        regex: '^(PrometheusOperatorListErrors|PrometheusOperatorWatchErrors|PrometheusOperatorSyncFailed|PrometheusOperatorReconcileErrors|PrometheusOperatorStatusUpdateErrors|PrometheusOperatorNodeLookupErrors|PrometheusOperatorNotReady|PrometheusOperatorRejectedResources)$'
    # END generated by tools/relabel_alerts_groups.sh
